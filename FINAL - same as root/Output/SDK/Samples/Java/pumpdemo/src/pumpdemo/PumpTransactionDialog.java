/**
 * PumpTransactionDialog.java
 * 
 * Copyright 1997-2012 Integration Technologies Limited
 * All rights reserved.
 * 
 */
package pumpdemo;

import itl.enabler.api.DeliveryData;
import itl.enabler.api.EnablerException;
import itl.enabler.api.Forecourt;
// import itl.enabler.api.Grade;
import itl.enabler.api.Pump;
import itl.enabler.api.Transaction;
import itl.enabler.api.TransactionCollection;
import itl.enabler.api.events.forecourt.ConfigChangeEventArgs;
import itl.enabler.api.events.pump.FuellingProgressEventArgs;
import itl.enabler.api.events.pump.PumpStatusEventArgs;
import itl.enabler.api.events.pump.PumpTransactionEventArgs;
import itl.enabler.api.events.types.PumpStatusEventType;
import itl.enabler.api.states.PumpState;
import itl.enabler.api.states.TransactionState;
import itl.enabler.api.types.ActionType;
import itl.enabler.api.types.DataType;

import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.SwingConstants;
import javax.swing.SwingUtilities;

import ca.odell.glazedlists.BasicEventList;
import ca.odell.glazedlists.EventList;
import ca.odell.glazedlists.swing.EventSelectionModel;
import ca.odell.glazedlists.swing.EventTableModel;

import pumpdemo.sale.Sale;
import pumpdemo.stack.StackData;
import pumpdemo.stack.StackDataTableFormat;

import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.Color;
import net.miginfocom.swing.MigLayout;
import javax.swing.JButton;
import javax.swing.ImageIcon;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.JTableHeader;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.UIManager;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import javax.swing.JToolBar;
import javax.swing.JCheckBox;
import javax.swing.border.EmptyBorder;
import java.awt.Font;

/**
 * Transaction stack for pump
 * 
 */
@SuppressWarnings("serial")
public class PumpTransactionDialog extends JDialog {

	private MainWindow mainWindow;
	private Pump pump;
	private Sale currSale;
	/**
	 * transaction stack and selection model
	 */
	private EventList<StackData> stackDataEventList = new BasicEventList<StackData>();
	private EventSelectionModel<StackData> stackDataSelectionModel = new EventSelectionModel<StackData>(
			stackDataEventList);

	private ImageIcon iconPause;
	private ImageIcon iconResume;

	private static final String iconPauseURL = "images/pause.png";
	private static final String iconResumeURL = "images/resume.png";

	/**
	 * transaction stack table
	 */
	private JTable stackDataTable;
	private JButton btnStack;
	private JButton btnPauseResume;
	private JButton btnAuth;
	private JCheckBox chckbxShowCurrent = new JCheckBox(
			"Show Current Active Transaction");

	public PumpTransactionDialog(MainWindow app, Pump pmp, Sale sale) {

		super(app.frmPumpDemo);
		getContentPane().setBackground(Color.LIGHT_GRAY);

		this.mainWindow = app;
		this.pump = pmp;
		currSale = sale;

		pump.addPumpEventListener(new Pump.PumpEventAdapter() {

			/*
			 * Update Pause/Resume buttons icons based on pump states
			 * 
			 * @see
			 * itl.enabler.api.Pump.PumpEventAdapter#onStatusChange(itl.enabler
			 * .api.events.pump.PumpStatusEventArgs)
			 */
			@Override
			public void onStatusChange(PumpStatusEventArgs ev) {

				if (ev.getEventType() == PumpStatusEventType.STATE) {
					PumpState pumpState = ((Pump) ev.getSource()).getState();
					/**
					 * Change button icons only if events were not triggered by
					 * a pause/resume button click from this terminal. <br>
					 * i.e If events were generated by a click from this
					 * terminal, we would have already handled it in that
					 * buttons' action event.
					 */
					if (pumpState == PumpState.DELIVERY_PAUSED) {
						if (btnPauseResume.getIcon() != iconResume) {
							btnPauseResume.setIcon(iconResume);
						}
					}
					if (pumpState == PumpState.DELIVERING) {
						if (btnPauseResume.getIcon() != iconPause) {
							btnPauseResume.setIcon(iconPause);
						}
					}
				}
			}

			/*
			 * Show running totals of current active transaction if that option
			 * is selected
			 * 
			 * @see
			 * itl.enabler.api.Pump.PumpEventAdapter#onFuellingProgress(itl.
			 * enabler.api.events.pump.FuellingProgressEventArgs)
			 */
			@Override
			public void onFuellingProgress(FuellingProgressEventArgs ev) {
				if (chckbxShowCurrent.isSelected()) {
					SwingUtilities.invokeLater(new Runnable() {
						public void run() {
							refreshTransactionList();
						}
					});
				}
			}

			/*
			 * Dynamically update the transaction list and action button states.
			 * 
			 * @see itl.enabler.api.Pump.PumpEventAdapter#onTransactionEvent(
			 * itl.enabler.api.events.pump.PumpTransactionEventArgs)
			 */
			@Override
			public void onTransactionEvent(PumpTransactionEventArgs ev) {
				refreshTransactionList();
				enableDisableButtons();
			}
		});

		mainWindow.forecourt
				.addForecourtEventListener(new Forecourt.ForecourtEventAdapter() {
					@Override
					/*
					 * (non-Javadoc)
					 * 
					 * @see itl.enabler.api.Forecourt.ForecourtEventAdapter#
					 * onConfigChangeEvent(java.util.EventObject)
					 * 
					 * Update the transaction list only if a grade config
					 * changes.
					 */
					public void onConfigChangeEvent(ConfigChangeEventArgs evArgs) {
						if (evArgs.getDataType() == DataType.GRADE
								&& evArgs.getActionType() == ActionType.UPDATE)
							refreshTransactionList();
					}
				});

		String titleString = String.format("Transaction Stack for Pump %d",
				pmp.getNumber());
		setTitle(titleString);
		setResizable(false);
		setMinimumSize(new Dimension(400, 335));

		getContentPane().setMinimumSize(new Dimension(100, 100));
		setLocationRelativeTo(mainWindow.frmPumpDemo);
		requestFocus();
		setAlwaysOnTop(true);
		setPreferredSize(new Dimension(400, 320));
		setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);

		refreshTransactionList();

		JPanel panelStack = new JPanel();
		panelStack.setBackground(Color.LIGHT_GRAY);
		panelStack.setPreferredSize(new Dimension(10, 200));
		getContentPane().add(panelStack, BorderLayout.NORTH);

		JPanel panelControl = new JPanel();
		panelControl.setBackground(Color.LIGHT_GRAY);
		panelControl.setPreferredSize(new Dimension(10, 85));
		getContentPane().add(panelControl, BorderLayout.SOUTH);
		panelControl.setLayout(new MigLayout("", "[][][][][][][][][][][][]",
				"[][][]"));

		btnAuth = new JButton("");
		btnAuth.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				// Authorise the pump
				try {
					pump.authoriseNoLimits("", "", -1);
				} catch (EnablerException ex) {
					mainWindow.showEnablerError(ex);
				}
			}
		});
		btnAuth.setBackground(UIManager.getColor("Button.background"));
		btnAuth.setIcon(new ImageIcon(PumpTransactionDialog.class.getResource("/itl/enabler/controls/pump/images/authed.png")));
		btnAuth.setMinimumSize(new Dimension(65, 60));
		panelControl.add(btnAuth, "cell 0 1,grow");

		try {
			iconPause = new ImageIcon(getClass().getResource(iconPauseURL));
			iconResume = new ImageIcon(getClass().getResource(iconResumeURL));
		} catch (Exception ex) {
			ex.printStackTrace();
		}

		btnPauseResume = new JButton("");
		btnPauseResume.setIcon(iconPause);
		btnPauseResume.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				PumpState pumpState = pump.getState();
				if (pumpState.compareTo(PumpState.DELIVERING) >= 0) {
					try {
						if (pumpState == PumpState.DELIVERY_PAUSED) {

							pump.resumeDelivery();
							btnPauseResume.setIcon(iconPause);
						} else {
							pump.pauseDelivery();
							btnPauseResume.setIcon(iconResume);
						}
					} catch (EnablerException ex) {
						mainWindow.showEnablerError(ex);
					}
				}
			}
		});
		btnPauseResume.setMaximumSize(new Dimension(65, 60));
		btnPauseResume.setIcon(new ImageIcon(PumpTransactionDialog.class
				.getResource("/itl/enabler/controls/pump/images/pause.png")));
		btnPauseResume.setMinimumSize(new Dimension(65, 60));
		panelControl.add(btnPauseResume, "cell 2 1,grow");

		btnStack = new JButton("");
		btnStack.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				if (pump.isCurrentTransaction()) {
					try {
						pump.stackCurrentTransaction();
					} catch (EnablerException ex) {
						mainWindow.showEnablerError(ex);
					}
				}
			}
		});
		btnStack.setIcon(new ImageIcon(PumpTransactionDialog.class.getResource("/itl/enabler/controls/pump/images/stack.png")));
		btnStack.setMinimumSize(new Dimension(65, 60));
		btnStack.setMaximumSize(new Dimension(65, 60));
		btnStack.setPreferredSize(new Dimension(65, 60));
		panelControl.add(btnStack, "cell 4 1,alignx center,aligny center");

		JButton btnSale = new JButton("");
		btnSale.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				/**
				 * Transfer all user selected transactions to sale and disable
				 * them in the table.
				 */
				EventList<StackData> selected = stackDataSelectionModel.getSelected();
				for (StackData stackData : selected) {
					try {
						currSale.addFuelTransaction(stackData.getTransaction());
						mainWindow.lblSubTotalName
								.setText(mainWindow.subTotalString);
					} catch (EnablerException ex) {
						mainWindow.showEnablerError(ex);
					}
				}
				stackDataSelectionModel.clearSelection();
			}
		});
		btnSale.setIcon(new ImageIcon(PumpTransactionDialog.class.getResource("/itl/enabler/controls/pump/images/forward.png")));
		btnSale.setMinimumSize(new Dimension(65, 60));
		btnSale.setMaximumSize(new Dimension(65, 60));
		panelControl.add(btnSale, "cell 10 1");

		JButton btnExit = new JButton("");
		btnExit.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				// Release resources
				stackDataSelectionModel.dispose();
				dispose();
			}
		});
		btnExit.setIconTextGap(0);
		btnExit.setIcon(new ImageIcon(PumpTransactionDialog.class.getResource("/itl/enabler/controls/pump/images/exit.png")));
		btnExit.setMinimumSize(new Dimension(65, 60));
		btnExit.setMaximumSize(new Dimension(65, 60));
		panelControl.add(btnExit, "cell 11 1,grow");

		EventTableModel<StackData> stackDataTableModel = new EventTableModel<StackData>(
				stackDataEventList, new StackDataTableFormat());
		stackDataTable = new JTable(stackDataTableModel);
		stackDataTable.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent ev) {

				/*
				 * For double clicks : Transfer user selected transaction to
				 * sale table.
				 */
				if (ev.getClickCount() == 2) {
					EventList<StackData> selected = stackDataSelectionModel.getSelected();
					for (StackData stackData : selected) {
						try {
							currSale.addFuelTransaction(stackData.getTransaction());
							mainWindow.lblSubTotalName.setText(mainWindow.subTotalString);
						} catch (EnablerException ex) {
							mainWindow.showEnablerError(ex);
						}
					}
				}
			}
		});

		stackDataTable.setFillsViewportHeight(true);
		stackDataTable.setSelectionModel(stackDataSelectionModel);

		// make all header texts center aligned and set background color
		DefaultTableCellRenderer defaultTableCellRenderer = (DefaultTableCellRenderer) stackDataTable
				.getTableHeader().getDefaultRenderer();
		defaultTableCellRenderer.setHorizontalAlignment(SwingConstants.CENTER);
		JTableHeader header = stackDataTable.getTableHeader();
		header.setBackground(Color.LIGHT_GRAY);

		// make numeric cells right aligned
		DefaultTableCellRenderer rightRenderer = new DefaultTableCellRenderer();
		rightRenderer.setHorizontalAlignment(JLabel.RIGHT);
		stackDataTable.getColumnModel().getColumn(1)
				.setCellRenderer(rightRenderer);
		stackDataTable.getColumnModel().getColumn(2)
				.setCellRenderer(rightRenderer);
		stackDataTable.getColumnModel().getColumn(3)
				.setCellRenderer(rightRenderer);

		// Make the grade name column a bit wider (for dummy transaction notice)
		int prefGradeColWidth = stackDataTable.getColumnModel().getColumn(0)
				.getPreferredWidth() + 50;
		stackDataTable.getColumnModel().getColumn(0)
				.setPreferredWidth(prefGradeColWidth);

		panelStack.setLayout(new BorderLayout(0, 0));

		JScrollPane scrollPane = new JScrollPane(stackDataTable);
		scrollPane.setPreferredSize(new Dimension(10, 200));
		panelStack.add(scrollPane, BorderLayout.NORTH);

		JToolBar toolBar = new JToolBar();
		toolBar.setBorder(new EmptyBorder(5, 5, 0, 0));
		toolBar.setBackground(Color.LIGHT_GRAY);
		getContentPane().add(toolBar, BorderLayout.WEST);
		chckbxShowCurrent.setFont(new Font("Tahoma", Font.PLAIN, 13));

		chckbxShowCurrent.setBackground(Color.LIGHT_GRAY);
		toolBar.add(chckbxShowCurrent);

		// Finally set action button states
		enableDisableButtons();

	}

	private void addStackItem(Transaction transaction) {

		StackData stackData = new StackData();

		stackData.setTransaction(transaction);
		DeliveryData dd = transaction.getDeliveryData();
		if (dd.getGrade() == null )
			stackData.setGradeName("(no hose selected)");
		else
			stackData.setGradeName(dd.getGrade().getName());
		stackData.setQuantity(dd.getQuantity());
		stackData.setUnitPrice(dd.getUnitPrice());
		stackData.setValue(dd.getMoney());

		stackDataEventList.add(stackData);
	}

	private void refreshTransactionList() {

		/*
		 * First add an entry for the most recently completed (current)
		 * transaction. If there is no current transaction mark a dummy entry
		 * into the list. Next fill in other transactions from the stack
		 */
		stackDataEventList.clear();
		if (pump == null) {
			return;
		}

		Transaction currTransaction = pump.getCurrentTransaction();
		if (currTransaction != null
				&& (currTransaction.getState() == TransactionState.COMPLETED || chckbxShowCurrent
						.isSelected())) {
			addStackItem(currTransaction);

		} else {
			StackData stackData = new StackData();
			stackData.setGradeName("(no current transaction)");
			stackDataEventList.add(stackData);
		}

		TransactionCollection transactionCollection = pump
				.getTransactionStack();
		for (Transaction transaction : transactionCollection) {
			if (transaction.getState() == TransactionState.COMPLETED) {
				addStackItem(transaction);
			}
		}
	}

	// Action button states. Action buttons are Auth, Pause/Resume, Stack
	private void enableDisableButtons() {

		btnPauseResume.setEnabled(false);
		btnStack.setEnabled(false);

		if (pump != null
				&& pump.getCurrentTransaction() != null
				&& pump.getCurrentTransaction().getState() == TransactionState.COMPLETED) {
			btnStack.setEnabled(true);
		}

		if (pump != null
				&& pump.getCurrentTransaction() != null
				&& pump.getCurrentTransaction().getState()
						.compareTo(TransactionState.AUTHORISED) >= 0) {
			btnAuth.setEnabled(false);
		} else {
			btnAuth.setEnabled(true);
		}

		if (pump != null
				&& pump.getState().compareTo(PumpState.DELIVERING) == 0) {
			btnPauseResume.setEnabled(true);
		}
	}
}

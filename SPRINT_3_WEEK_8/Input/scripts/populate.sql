--
-- ENABLER DATABASE INSTALLATION SCRIPT
--
-- This script is responsible for populating the Enabler Database system tables
--
-- This script is run by the batch file generated by MkUpgrade, and is run for both
-- new and upgrade installs.
--
-- $Header: /Enabler/Data Model/DBU 4.0/populate.sql 27    18/01/19 9:12a Adrians $
--

set nocount on
go

print '------------------------------------------------------------'
print 'Populating Enabler System Tables ...'
print CONVERT(varchar,getdate(), 121)
go

print '-- protocol type'

-- These will either exist or not
if exists(select column_name from information_schema.columns where table_name = 'protocol_type' and column_name = 'protocol_type_id')
BEGIN
	if (select count(protocol_type_id) from protocol_type where protocol_type_id = 1) < 1
	BEGIN
		insert into protocol_type ( protocol_type_id, protocol_type_name )
		values ( 1, 'Pump' )
	END

	if (select count(protocol_type_id) from protocol_type where protocol_type_id = 2) < 1
	BEGIN
		insert into protocol_type ( protocol_type_id, protocol_type_name )
		values ( 2, 'Tank Gauge' )
	END

	if (select count(protocol_type_id) from protocol_type where protocol_type_id = 3) < 1
	BEGIN
		insert into protocol_type ( protocol_type_id, protocol_type_name )
		values ( 3, 'OPT' )
	END

	if (select count(protocol_type_id) from protocol_type where protocol_type_id = 4) < 1
	BEGIN
		insert into Protocol_type ( protocol_type_id, protocol_type_name )
		values ( 4, 'Emulation' )
	END

	if (select count(protocol_type_id) from protocol_type where protocol_type_id = 5) < 1
	BEGIN
		insert into Protocol_type ( protocol_type_id, protocol_type_name ) 
		values ( 5, 'Tag Reader' )
	END

	if (select count(protocol_type_id) from protocol_type where protocol_type_id = 6) < 1
	BEGIN
		insert into Protocol_type ( protocol_type_id, protocol_type_name ) 
		values ( 6, 'Camera' )
	END
END
go


EXEC ADD_PROTOCOL @RELEASED = 1,
	@PROT_TYPE = 1,
	@PROT_NAME = 'Mechanical', 
	@PROT_ID = 0, 
	@DRIVER_CLASS =   '',  
	@INTER_POLL_DELAY = 0, 
	@POLL_TYPE = 0, 
	@LINE_CONTROL = 0, 
	@BAUD_DIVISOR = 0,
	@PROT_DESC = '', 
	@OUTBOARD_PROT = 1
go

EXEC ADD_PROTOCOL @RELEASED = 1,
	@PROT_TYPE = 1,
	@PROT_NAME = 'Not installed', 
	@PROT_ID = 11, 
	@DRIVER_CLASS =   '',  
	@INTER_POLL_DELAY = 0, 
	@POLL_TYPE = 0, 
	@LINE_CONTROL = 0, 
	@BAUD_DIVISOR = 0,
	@PROT_DESC = '', 
	@OUTBOARD_PROT = 1
go

EXEC ADD_PROTOCOL @RELEASED = 1,
	@PROT_TYPE = 1,
	@PROT_NAME = 'MPP Simulator', 
	@PROT_ID = 3, 
	@DRIVER_CLASS =   '{0D88C27B-257A-4F97-83CD-044A40F75CE3}',  
	@INTER_POLL_DELAY = 10, 
	@POLL_TYPE = 2, 
	@LINE_CONTROL = 27, 
	@BAUD_DIVISOR = 240,
	@PROT_DESC = 'Using ITL PumpSim cable (null modem)', 
	@OUTBOARD_PROT = 1
go

EXEC ADD_PUMP_TYPE 
	@Pump_Type_ID = 4, 
	@Pump_Type_Name       = 'MPP Sim', 
	@Protocol_ID          =   3, 
	@Poll_Response_TO     = 300, 
	@Max_No_Responses     =   3, 
	@Inter_Char_TO        =  20, 
	@Polling_Rate         = 200, 
	@Has_Lights           =   1, 
	@Has_Preset           =   1, 
	@Max_Price_levels     =   2,
	@Max_Hoses            =   4
go 

EXEC ADD_PUMP_TYPE
	@pump_type_id = 80,
	@Pump_Type_Name       = 'Mechanical pump',
	@Protocol_ID          =   0,
	@Poll_Response_TO     =   0,
	@Max_No_Responses     =   0,
	@Inter_Char_TO        =   0,
	@Polling_Rate         = 300,
	@Has_Lights           =   0,
	@Has_Preset           =   0,
	@Max_Price_Levels     =   2,
	@Max_Hoses            =   8
go


print '-- loops'
go

if (select count(loop_id) from loops) < 5
BEGIN
   insert into loops 
   ( Loop_ID , Protocol_ID ,  Port_Assign , Port_Name ) 
   values ( 1 , 11 , 1 , 'Port 1')         

   insert into loops 
  ( Loop_ID , Protocol_ID ,  Port_Assign , Port_Name ) 
   values ( 2 , 11 , 2 , 'Port 2') 

   insert into loops 
   ( Loop_ID , Protocol_ID ,  Port_Assign , Port_Name ) 
   values ( 3 , 11 , 3 , 'Port 3') 

   insert into loops 
   ( Loop_ID , Protocol_ID ,  Port_Assign , Port_Name ) 
   values ( 4 , 11 , 4 , 'Port 4') 

   insert into loops 
   ( Loop_ID , Protocol_ID ,  Port_Assign , Port_Name ) 
   values ( 5 , 11 , 5 , 'IFSF Lon') 

END
go

if (select count(loop_id) from loops where loop_id = 0) < 1
begin
   insert into loops 
   ( Loop_ID , Protocol_ID ,  Port_Assign , Port_Name ) 
   values ( 0 , 0 , 0 , 'Null Port')         
end
go

print 'Update PAM protocol'
go

if not exists (select protocol_id from pump_protocol where protocol_id = 200)
Begin
   insert into pump_protocol 
         ( Protocol_ID, Protocol_Name, Protocol_Desc,      Driver_Class_ID, Inter_Poll_Delay, 
           Poll_Type,   Line_Control,  Baud_Divisor_latch, protocol_type_id, Extended_Port_Settings)
   values( 200,  'PAM Emulation' , '', '{EB73D2D0-3823-4A49-8CD8-212BC610CCFC}', 0,
            0, 0, 0, 4, 'COM1: baud=4800 parity=O data=7 stop=1')
End
Else
Begin 
  update pump_protocol 
  set protocol_type_id = 4, 
      protocol_name = 'PAM Emulation',
      Extended_Port_Settings = 'COM1: baud=4800 parity=O data=7 stop=1'
  where protocol_id = 200
End
go

print '--adding price levels (default is only 1 level)'
go

if not exists( select price_level from price_level_types where price_level = 1 ) 
insert into  price_level_types 
( Price_level,  Level_Name ) 
values ( 1 , 'Default' ) 

--if not exists( select price_level from price_level_types where price_level = 2 ) 
--insert into  price_level_types 
--( Price_level,  Level_Name ) 
--values ( 2 , 'Full Service' ) 

--if not exists( select price_level from price_level_types where price_level = 3 ) 
--insert into  price_level_types 
--( Price_level,  Level_Name ) 
--values ( 3 , 'Cash' ) 

--if not exists( select price_level from price_level_types where price_level = 4 ) 
--insert into  price_level_types 
--( Price_level,  Level_Name ) 
--values ( 4 , 'Credit' ) 
go

print '--adding site profiles'
go

	-- site profiles
	if not exists (select Site_Profile_ID from site_profile where site_profile_ID = 1)
		insert into site_profile
		( Site_Profile_ID, Site_Profile_Number, Site_Profile_Name, Site_Profile_Desc, Start_Time, Valid_Days ) 
		values ( 1 , 1, 'Day mode' , 'Site mode for day time operation', 800, '1,2,3,4,5,6,7' ) 

	if not exists (select Site_Profile_ID from site_profile where site_profile_ID = 2)
		insert into site_profile
		( Site_Profile_ID, Site_Profile_Number, Site_Profile_Name, Site_Profile_Desc, Start_Time, Valid_Days ) 
		values ( 2 , 2, 'Night mode' , 'Site mode for night time operation', 2000,  '1,2,3,4,5,6,7' ) 
go

print '--adding default site config'
go
if (select count(site_id) from global_settings) = 0
begin
  insert into Global_Settings ( Site_Id, Site_Profile_Id, Prepay_Reserved_TO )
  values ( 1, 1, 180 )
 
  update Global_Settings
     set Site_Name = 'Enabler demo',
--         Pump_Stack_Size    = 1, 
         Prepay_Refund_TO   = 180, 
         Prepay_Taken_TO    = 180, 
         Preauth_Rsvd_TO    = 180, 
         Reserve_TO         = 180,
         Authorized_Timeout = 30, 
         Site_Profile_ID    = 1,
         Monitor_Del_TO     = 60, 
         Delivery_Idle_TO   = 60, 
         Hose_del_keep_days = 90, 
         Tank_del_keep_days = 90, 
         Event_Keep_Days    = 90, 
--         Tank_Gauge_Type    = 0, 
--         Tank_Gauge_Pars    = 'COM1: baud=9600 parity=E data=7 stop=1', 
--         Minimum_Del_Volume = 0.000, 
--         Max_Dels_In_Prog   = 0,
         Attendant_Support  = 0, 
         Att_Keep_Days      = 90, 
         Delivery_age_TO    = 300, 
         Delivering_NR_TO   = 0, 
         Tank_Dips          = 1, 
         Tank_Drops         = 1, 
         Pump_Meters        = 1,
         Auto_Modes_On      = 0
end
go

-- from v4.0 blocking functionality is always on instead of being an optional feature
print '  setting can_disable flags on'
update Global_Settings
   set Can_Disable_Hoses_By_Grade = 1,
       Can_Disable_Hoses_By_Tank = 1
go


print 'Updating Pump Profile for "Use Site Profile" setting'
go

	declare @profile_id as int
	if ( select count(*) from pump_profile ) > 0 
		set @profile_id = ( select max( pump_profile_id )+1 from pump_profile )
	else
		set @profile_id = 1

	-- we still require a wildcard pump profile row for pumps which do not have a specific profile row
	if not exists (select Site_Profile_ID from pump_profile where isnull( site_profile_ID, 0) = 0 and isnull( pump_profile_pump_id, 0 )=0 )
	   insert into pump_profile
	   ( Pump_Profile_ID, allow_postpay, allow_prepay, allow_preauth, pump_stacking, stack_size )
	   values( @profile_id , 2, 2, 2, 2, -1 )
	go

	-- the profile record for the site mode is now a row in the pump_profile table with a null in pump_profile_pump_id
	-- now add two site profiles
	declare @profile_id as int
	set @profile_id = ( select max( pump_profile_id )+1 from pump_profile )

	if not exists (select Site_Profile_ID from pump_profile where site_profile_ID = 2 and isnull( pump_profile_pump_id, 0 )=0 )
	   insert into pump_profile
	   ( Pump_Profile_ID, Site_Profile_ID, allow_postpay, allow_prepay, allow_preauth, pump_stacking, stack_size )
	   values( @profile_id, 1, 1, 1, 1, 1, 2 )
    go

	declare @profile_id as int
	set @profile_id = ( select max( pump_profile_id )+1 from pump_profile )

	if not exists (select Site_Profile_ID from pump_profile where site_profile_ID = 2 and isnull( pump_profile_pump_id, 0 )=0 )
	   insert into pump_profile
	   ( Pump_Profile_ID, Site_Profile_ID, allow_postpay, allow_prepay, allow_preauth, pump_stacking, stack_size )
	   values( @profile_id, 2, 1, 1, 1, 1, 2 )
    go

print '--adding period types'
go

if not exists( select period_type from period_types where period_type = 1)
insert into period_types 
( period_type , period_name , period_keep_days ) 
values ( 1 , 'Shift' , 65 ) 

if not exists( select period_type from period_types where period_type = 2)
insert into period_types 
( period_type , period_name , period_keep_days ) 
values ( 2 , 'Day' , 65 ) 

if not exists( select period_type from period_types where period_type = 3)
insert into period_types 
( period_type , period_name , period_keep_days ) 
values ( 3 , 'Month' , 800 ) 

if not exists( select period_type from period_types where period_type = 4)
insert into period_types 
( period_type , period_name , period_keep_days ) 
values ( 4 , 'Year' , 4000 ) 
go

print '--adding device types'
go

if not exists( select device_type from device_type where device_type = 1 ) 
begin
 print '  Pump'
 insert into 
  device_type ( device_type , device_name ) 
  values ( 1 , 'Pump' ) 
end
go

if not exists( select device_type from device_type where device_type = 6 ) 
begin
  print '  OPT'
  insert into 
   device_type ( device_type, device_name, device_description)
   values (6, "OPT", NULL )
end
go

if not exists( select device_type from device_type where device_type = 8 ) 
begin
  print '  Price sign'
  insert into 
   device_type ( device_type , device_name ) 
   values ( 8 , 'Price sign' ) 
end
go


if not exists( select device_type from device_type where device_type = 9 ) 
begin
  print '  Tank'
  insert into 
   device_type ( device_type , device_name ) 
   values ( 9 , 'Tank' ) 
end
go

IF NOT EXISTS(SELECT Device_Type FROM Device_Type WHERE Device_Type = 10 )
begin		
  print '  Hose'
INSERT INTO Device_Type
( Device_type , Device_name ) 
VALUES ( 10 , 'Hose' ) 
end
GO

-- attendant tags
if not exists( select device_type from device_type where device_type = 11 ) 
begin
  print '  Tag Reader'
  insert into 
   device_type ( device_type , device_name ) 
   values ( 11 , 'Tag Reader' )
end
go

if not exists( select device_type from device_type where device_type = 16 ) 
begin
  print '  Back Office'
  insert into 
   device_type ( device_type , device_name ) 
   values ( 16 , 'Back Office' ) 
end
go 

if not exists( select device_type from device_type where device_type = 17 ) 
begin
  print '  Application'
  insert into 
   device_type ( device_type , device_name ) 
   values ( 17 , 'Application' ) 
end
go 

if not exists( select device_type from device_type where device_type = 100 ) 
begin
  print '  Pump Server'
  insert into 
   device_type ( device_type , device_name ) 
   values ( 100 , 'Pump Server' ) 
end
go 


if not exists( select device_type from device_type where device_type = 101 ) 
begin
  print '  Monitor'
  insert into device_type ( device_type , device_name ) 
  values ( 101 , 'Monitor' ) 
end
go

if not exists( select device_type from device_type where device_type = 102 ) 
begin
  print '  Web Site'
  insert into device_type ( device_type , device_name ) 
  values ( 102 , 'Web site' ) 
end
go

if not exists( select device_type from device_Type where device_Type = 103 )
begin
  print '  Forecourt Camera'
  insert into device_Type (device_Type, device_Name) 
  values (103, 'Forecourt Camera')
end
go

if not exists( select role_id from Roles where role_id = 1 ) 
begin
  print '  Default Role'
  insert into Roles ( Role_ID, Role_Name, Role_Flags )
  values (
	1,
	'Enabler Administrator',
	convert(binary,0x0202020202020202020200000000000000000000,1))
end
else
begin
  print 'Update Default Role'
  update Roles set Role_Flags = convert(binary,0x0202020202020202020200000000000000000000,1) 
  where Role_ID = 1
end
go

if not exists( select user_id from Users where user_id = 1 ) 
begin
  print '  Default User'
  insert into Users ( User_ID, Login_Name, User_Name, Password, No_Activity_Timeout, Language, Role_ID )
  values (
	1,
	'admin', 'Enabler administrator',
	'21232f297a57a5a743894a0e4a801fc3',
	120,
	'default',
	1
	)
end
go

update users set password = '21232f297a57a5a743894a0e4a801fc3' where login_name = 'admin' and password = 'admin'
go


IF EXISTS (SELECT name FROM sysobjects WHERE name = 'sp_add_device_event_type' AND type = 'P')
   drop procedure sp_add_device_event_type
go

-- this stored procedure adds an event type for a specific device, if the event
-- already exists the event details are updated
create procedure sp_add_device_event_type
    @Device_Type   int,
    @Event_Type    int,
    @Event_Name    nchar(30),
    @Log_Event     smallint,
    @Display_Event smallint,
    @Event_Level   smallint,
    @Event_Description   nvarchar(80) = NULL
as
begin
    if not exists( select event_type from event_type where event_type = @Event_Type and device_type = @Device_Type )
        insert into event_type ( Device_Type, Event_Type )
        values ( @Device_Type, @Event_Type )

    -- update the event type
    update Event_Type
       set Event_Name    = @Event_Name,
           Log_Event     = @Log_Event,
           Display_Event = @Display_Event,
           Event_Level   = @Event_Level
     where Device_Type   = @Device_Type
       and Event_Type    = @Event_Type
	   
	update Event_Type
	   set Event_Description = isnull(@Event_Description, @Event_Name)
	 where Device_type = @Device_Type
	   and Event_Type = @Event_Type
end

go

print '--adding pump events'
--                                    123456789012345678901234567890
exec sp_add_device_event_type 1,  0, 'Information',          1, 0, 1
exec sp_add_device_event_type 1,  1, 'Installed',            1, 0, 1
exec sp_add_device_event_type 1,  2, 'Started',              1, 0, 1
exec sp_add_device_event_type 1,  3, 'Stopped',              1, 0, 2
exec sp_add_device_event_type 1,  4, 'Price Changed',        1, 0, 1
exec sp_add_device_event_type 1,  5, 'Offline delivery',     1, 0, 2
exec sp_add_device_event_type 1,  6, 'Delivery lost',        1, 1, 3
exec sp_add_device_event_type 1,  7, 'Preauth lost',         1, 0, 2
exec sp_add_device_event_type 1,  8, 'Prepay lost',          1, 0, 2
exec sp_add_device_event_type 1,  9, 'Duplicate delivery',   1, 0, 2
exec sp_add_device_event_type 1, 10, 'Meter reversed',       1, 0, 2
-- attendant logon/logoff events added in Enabler v3.40.10
exec sp_add_device_event_type 1, 11, 'Attendant logon',      1, 0, 1
exec sp_add_device_event_type 1, 12, 'Attendant logoff',     1, 0, 1
exec sp_add_device_event_type 1, 13, 'Meter rollover',       1, 0, 1
exec sp_add_device_event_type 1, 14, 'Meter reset',          1, 0, 2
exec sp_add_device_event_type 1, 15, 'Meter error',          1, 0, 3
exec sp_add_device_event_type 1, 16, 'Meter not supported',  1, 0, 1
exec sp_add_device_event_type 1, 17, 'Meter moved forwards', 1, 0, 2
exec sp_add_device_event_type 1, 18, 'Pump warning',         1, 1, 2
exec sp_add_device_event_type 1, 19, 'Pump error',           1, 1, 3
exec sp_add_device_event_type 1, 20, 'Pump CPU reset',       1, 1, 3
exec sp_add_device_event_type 1, 21, 'Pump CPU fault',       1, 1, 3
exec sp_add_device_event_type 1, 22, 'Pump fuel level low',  1, 1, 2
exec sp_add_device_event_type 1, 23, 'Pump lost delivery',   1, 1, 3

exec sp_add_device_event_type 1, 30, 'Limit too small',      1, 1, 2
exec sp_add_device_event_type 1, 31, 'Limit precision exceeded', 1, 1, 2
exec sp_add_device_event_type 1, 32, 'Limit too large',      1, 1, 2

exec sp_add_device_event_type 1, 40, 'FDM fault',            1, 1, 3

exec sp_add_device_event_type 1, 50, 'Price out of range',   1, 1, 2
exec sp_add_device_event_type 1, 51, 'Zero price not allowed', 1, 1, 2
exec sp_add_device_event_type 1, 52, 'Price precision exceeded', 1, 1, 2

-- IFSF-originated errors and events (original code + 100)
exec sp_add_device_event_type 1,101, 'RAM defect',           1, 1, 3
exec sp_add_device_event_type 1,102, 'ROM defect',           1, 1, 3
exec sp_add_device_event_type 1,103, 'Config error',         1, 1, 3
exec sp_add_device_event_type 1,104, 'Power problem',        1, 0, 2 
exec sp_add_device_event_type 1,105, 'Main comms error',     1, 0, 3
exec sp_add_device_event_type 1,106, 'Display error',        1, 1, 3
exec sp_add_device_event_type 1,107, 'Pulser error',         1, 1, 3
exec sp_add_device_event_type 1,108, 'Calibration error',    1, 1, 3
exec sp_add_device_event_type 1,109, 'Blender error',        1, 1, 3
exec sp_add_device_event_type 1,110, 'Download error',       1, 1, 3
exec sp_add_device_event_type 1,111, 'Checksum error',       1, 1, 3
exec sp_add_device_event_type 1,112, 'Leak error',           1, 1, 3
exec sp_add_device_event_type 1,113, 'PCD RAM defect',        1, 1, 3, 'Protocol Converter Device RAM defect'
exec sp_add_device_event_type 1,114, 'PCD ROM defect',        1, 1, 3, 'Protocol Converter Device ROM defect'
exec sp_add_device_event_type 1,115, 'PCD config error',      1, 1, 3, 'Protocol Converter Device configuration error'
exec sp_add_device_event_type 1,116, 'PCD power problem',     1, 0, 3, 'Protocol Converter Device power problem'
exec sp_add_device_event_type 1,117, 'PCD main comms error',  1, 0, 3, 'Protocol Converter Device main communications error'
exec sp_add_device_event_type 1,118, 'Vapour recovery error',                1, 1, 3
-- ifsf reserved 119-131
exec sp_add_device_event_type 1,132, 'Battery error',                        1, 1, 2
exec sp_add_device_event_type 1,133, 'Comms error',                          1, 0, 2
exec sp_add_device_event_type 1,134, 'Customer STOP pressed',                1, 1, 2
-- ifsf reserved 135
exec sp_add_device_event_type 1,136, 'Authorise time out',                   1, 0, 1
exec sp_add_device_event_type 1,137, 'Maximum fill time reached',            1, 0, 1
exec sp_add_device_event_type 1,138, 'Timeout before fuel flow start',       1, 0, 1, 'No fuel flow detected before progress timeout expired.'
exec sp_add_device_event_type 1,139, 'Limit reached',                        1, 0, 1
exec sp_add_device_event_type 1,140, 'Fueling suspended',                    0, 0, 1
exec sp_add_device_event_type 1,141, 'Fueling resumed',                      0, 0, 1
exec sp_add_device_event_type 1,142, 'Vapour Recovery timer started',        1, 0, 2
exec sp_add_device_event_type 1,143, 'Vapour Recovery timer reset',          1, 0, 2
exec sp_add_device_event_type 1,144, 'Vapour Recovery module defect',        1, 1, 3
-- following errors are more internal IFSF errors
exec sp_add_device_event_type 1,145, 'Pump is inoperative',                  0, 0, 2
exec sp_add_device_event_type 1,146, 'Pump has not been opened',             0, 0, 2
exec sp_add_device_event_type 1,147, 'Pump is already opened',               0, 0, 2
exec sp_add_device_event_type 1,148, 'No delivery in progress',              0, 0, 2
exec sp_add_device_event_type 1,149, 'Delivery already started',             0, 0, 2
--                                    123456789012345678901234567890
exec sp_add_device_event_type 1,150, 'State prevents configuration',         1, 1, 2, 'Configuration is not possible the current state'
exec sp_add_device_event_type 1,151, 'Controller not permitted',             1, 1, 2, 'Command recieved from unrecognised controller'
exec sp_add_device_event_type 1,152, 'Urea temperature low',                 1, 1, 2
-- ifsf reserved 153-155
exec sp_add_device_event_type 1,156, 'Manufacturer specific error 1',        1, 0, 2
exec sp_add_device_event_type 1,157, 'Manufacturer specific error 2',        1, 0, 2
exec sp_add_device_event_type 1,158, 'Manufacturer specific error 3',        1, 0, 2
exec sp_add_device_event_type 1,159, 'Manufacturer specific error 4',        1, 0, 2
exec sp_add_device_event_type 1,160, 'Manufacturer specific error 5',        1, 0, 2
exec sp_add_device_event_type 1,161, 'Manufacturer specific error 6',        1, 0, 2
exec sp_add_device_event_type 1,162, 'Manufacturer specific error 7',        1, 0, 2
exec sp_add_device_event_type 1,163, 'Manufacturer specific error 8',        1, 0, 2
exec sp_add_device_event_type 1,164, 'Manufacturer specific error 9',        1, 0, 2
-- more for PCI-DSS
exec sp_add_device_event_type 17,  167, 'Startup',          	1, 0, 1
exec sp_add_device_event_type 17,  168, 'Add',         		1, 0, 1
exec sp_add_device_event_type 17,  169, 'Delete',          	1, 0, 1
exec sp_add_device_event_type 17,  170, 'Edit',          	1, 0, 1
exec sp_add_device_event_type 17,  171, 'Print',          	1, 0, 1
exec sp_add_device_event_type 17,  172, 'Shutdown',          	1, 0, 1
exec sp_add_device_event_type 17,  172, 'Shutdown',          	1, 0, 1
exec sp_add_device_event_type 17,  173, 'Validate',          	1, 0, 1
exec sp_add_device_event_type 17,  174, 'Generate',          	1, 0, 1
exec sp_add_device_event_type 17,  175, 'Export',          	1, 0, 1
go


print '--adding OPT events '
exec sp_add_device_event_type 6,  0, 'Information',          1, 0, 1
exec sp_add_device_event_type 6,  1, 'Installed',            1, 0, 1
exec sp_add_device_event_type 6,  2, 'Started',              1, 0, 1
exec sp_add_device_event_type 6,  3, 'Stopped',              1, 0, 2
exec sp_add_device_event_type 6,  4, 'General',              1, 0, 2
exec sp_add_device_event_type 6,  5, 'OPT Security fault',   1, 1, 2
go

print '--adding price sign events'
exec sp_add_device_event_type 8,  0, 'Information',          1, 0, 1
exec sp_add_device_event_type 8,101, 'RAM defect',           1, 1, 3
exec sp_add_device_event_type 8,102, 'ROM defect',           1, 1, 3
exec sp_add_device_event_type 8,103, 'Config error',         1, 1, 3
exec sp_add_device_event_type 8,104, 'Power problem',        1, 0, 3
exec sp_add_device_event_type 8,105, 'Main comms error',     1, 0, 3
exec sp_add_device_event_type 8,106, 'Download error',       1, 1, 3
exec sp_add_device_event_type 8,107, 'Checksum error',       1, 1, 3
exec sp_add_device_event_type 8,164, 'Battery error',        1, 1, 2
exec sp_add_device_event_type 8,165, 'Comms error',          1, 0, 2
exec sp_add_device_event_type 8,166, 'Display error',        1, 1, 2
go


print '--adding tank events'
go
exec sp_add_device_event_type 9,  0, 'Information',          1, 0, 1
exec sp_add_device_event_type 9,  1, 'Setup data warning',   1, 0, 2
exec sp_add_device_event_type 9,  2, 'Leak warning',         1, 1, 2
exec sp_add_device_event_type 9,  3, 'High water alarm',     1, 1, 3
exec sp_add_device_event_type 9,  4, 'Overfill alarm',       1, 1, 3
exec sp_add_device_event_type 9,  5, 'Low limit alarm',      1, 1, 3
exec sp_add_device_event_type 9,  6, 'Theft alarm',          1, 1, 3
exec sp_add_device_event_type 9,  7, 'High limit alarm',     1, 1, 3
exec sp_add_device_event_type 9,  8, 'Invalid height alarm', 1, 1, 3
exec sp_add_device_event_type 9,  9, 'Tank probe fault alarm',      1, 1, 3
exec sp_add_device_event_type 9, 10, 'High water warning',   1, 1, 2
exec sp_add_device_event_type 9, 11, 'Delivery required warning', 1, 1, 2
exec sp_add_device_event_type 9, 12, 'Maximum level alarm',  1, 1, 3
exec sp_add_device_event_type 9, 13, 'Gross leak test alarm',1, 0, 3
exec sp_add_device_event_type 9, 14, 'Periodic leak test alarm', 1, 0, 3
exec sp_add_device_event_type 9, 15, 'Annual leak test alarm', 1, 0, 3
exec sp_add_device_event_type 9, 16, 'Periodic test warning', 1, 0, 2
exec sp_add_device_event_type 9, 17, 'Annual test warning',  1, 0, 2
exec sp_add_device_event_type 9, 18, 'Periodic test alarm',  1, 0, 3

exec sp_add_device_event_type 9, 19, 'Annual test alarm',    1, 0, 3
exec sp_add_device_event_type 9, 20, 'Leak test active',     1, 0, 2
exec sp_add_device_event_type 9, 21, 'No CSLD idle time warning', 1, 0, 2
exec sp_add_device_event_type 9, 22, 'Siphon break active',  1, 0, 2
exec sp_add_device_event_type 9, 23, 'CLSD rate increase warning', 1, 0, 2
exec sp_add_device_event_type 9, 24, 'Accuchart calibration warning', 1, 0, 2
exec sp_add_device_event_type 9, 25, 'HRM reconcilation warning', 1, 0, 2
exec sp_add_device_event_type 9, 26, 'HRM reconciliation alarm', 1, 0, 3
exec sp_add_device_event_type 9, 27, 'Cold temperature',     1, 0, 2
exec sp_add_device_event_type 9, 28, 'Online',               1, 1, 3
exec sp_add_device_event_type 9, 29, 'Offline',              1, 1, 3
go
print '--adding tank events (IFSF)'
go
-- IFSF tank gauge errors
exec sp_add_device_event_type 9,101, 'RAM defect',           1, 1, 3
exec sp_add_device_event_type 9,102, 'ROM defect',           1, 1, 3
exec sp_add_device_event_type 9,103, 'Config error',         1, 1, 3
exec sp_add_device_event_type 9,104, 'Power problem',        1, 0, 3
exec sp_add_device_event_type 9,105, 'Main comms error',     1, 0, 3
exec sp_add_device_event_type 9,132, 'Battery error',        1, 1, 2
exec sp_add_device_event_type 9,133, 'Comms error',          1, 0, 2
go

print '--adding hose events'
exec sp_add_device_event_type 10, 1 , 'Volume meter rollover',        1, 0, 1
exec sp_add_device_event_type 10, 2 , 'Money meter rollover',         1, 0, 1
exec sp_add_device_event_type 10, 3 , 'Volume2 meter rollover',       1, 0, 1

exec sp_add_device_event_type 10, 4 , 'Volume meter reset',           1, 0, 2
exec sp_add_device_event_type 10, 5 , 'Money meter reset',            1, 0, 2
exec sp_add_device_event_type 10, 6 , 'Volume2 meter reset',          1, 0, 2

exec sp_add_device_event_type 10, 7 , 'Volume meter error',           1, 0, 3
exec sp_add_device_event_type 10, 8 , 'Money meter error',            1, 0, 3
exec sp_add_device_event_type 10, 9 , 'Volume2 meter error',          1, 0, 3

exec sp_add_device_event_type 10, 10 , 'Volume meter not supported',  1, 0, 1
exec sp_add_device_event_type 10, 11 , 'Money meter not supported',   1, 0, 1
exec sp_add_device_event_type 10, 12 , 'Volume2 meter not supported', 1, 0, 1

exec sp_add_device_event_type 10, 13 , 'Volume meter ok',             1, 0, 1
exec sp_add_device_event_type 10, 14 , 'Money meter ok',              1, 0, 1
exec sp_add_device_event_type 10, 15 , 'Volume2 meter ok',            1, 0, 1

exec sp_add_device_event_type 10, 16 , 'Volume meter reversed',       1, 0, 1
exec sp_add_device_event_type 10, 17 , 'Money meter reversed',        1, 0, 1
exec sp_add_device_event_type 10, 18 , 'Volume2 meter reversed',      1, 0, 1

exec sp_add_device_event_type 10, 19 , 'Volume meter moved forward',  1, 0, 1
exec sp_add_device_event_type 10, 20 , 'Money meter moved forward',   1, 0, 1
exec sp_add_device_event_type 10, 21 , 'Volume2 meter moved forward', 1, 0, 1

exec sp_add_device_event_type 10, 22 , 'Hose leak detected',          1, 1, 2
exec sp_add_device_event_type 10, 23 , 'Hose fault',                  1, 1, 3

print '--adding tag events'
exec sp_add_device_event_type 11,  0, 'Information',                  1, 0, 1
exec sp_add_device_event_type 11,  1, 'Installed',                    1, 0, 1
exec sp_add_device_event_type 11,  2, 'Started',                      1, 0, 1
exec sp_add_device_event_type 11,  3, 'Stopped',                      1, 0, 2
exec sp_add_device_event_type 11,  4, 'Read',                         1, 0, 2
exec sp_add_device_event_type 11,  10, 'Error',                       1, 0, 2

GO



print '--adding BO events'
exec sp_add_device_event_type 16,  0, 'Information',          1, 0, 1
exec sp_add_device_event_type 16,  6, 'Test delivery',        1, 0, 1
exec sp_add_device_event_type 16,  7, 'Drive off',            1, 0, 1
go


print '--adding Pump Server events'
exec sp_add_device_event_type 100,  1, 'Information',            1, 0, 1
exec sp_add_device_event_type 100,  2, 'Warning',                1, 1, 2
exec sp_add_device_event_type 100,  3, 'Error',                  1, 1, 3
exec sp_add_device_event_type 100,  4, 'Enabler card fault',     1, 1, 3
exec sp_add_device_event_type 100,  5, 'Enabler card reset',     1, 1, 3
go

print '--adding Monitor events'
exec sp_add_device_event_type 101,  1, 'Information',            1, 1, 1
exec sp_add_device_event_type 101,  2, 'Warning',                1, 1, 2
exec sp_add_device_event_type 101,  3, 'Error',                  1, 1, 3
exec sp_add_device_event_type 101,  4, 'Critical Error',         1, 1, 4
go

print '--adding Web events'
exec sp_add_device_event_type 102,  1, 'Information',            1, 1, 1
exec sp_add_device_event_type 102,  2, 'Warning',                1, 1, 2
exec sp_add_device_event_type 102,  3, 'Error',                  1, 1, 3
exec sp_add_device_event_type 102,  4, 'Critical',           	 1, 1, 4
exec sp_add_device_event_type 102,  5, 'Grade Prices',           1, 1, 1
go

print '--adding Forecourt Camera events'
exec sp_add_device_event_type 103,  0, 'Information',            1, 0, 1
exec sp_add_device_event_type 103,  1, 'Installed',              1, 0, 1
exec sp_add_device_event_type 103,  2, 'Error',                  1, 0, 3
go

-- all OPT stuff moved to OPTUpdate.SQL


-- default every field to Enabled
IF ( SELECT count(Port_Config) FROM Enabler_Options) < 1
BEGIN
  INSERT INTO Enabler_Options 	( Tank_Delete, Tank_Add, Grade_Delete, Grade_Add, 
				Pump_Delete, Pump_Add, Hose_Delete, Hose_Add,
				Level_Delete, Level_Add, Mode_Delete, Mode_Add, Mode_Edit,
				Port_Config, Emulation_Config, OPT_Config,
				OPT_Delete, OPT_Add, Price_Edit, TG_Config, TG_Delete, TG_Add, Attendant_Add,
		       	        Attendant_Delete, Attendant_Edit)
  VALUES (1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1)
END
go

-- Adding Hose_Total_State
IF EXISTS (SELECT name FROM sysobjects WHERE name = 'Add_Hose_Total_State' AND type = 'P')
   DROP PROCEDURE Add_Hose_Total_State
GO

-- Adding Hose_Total_States
CREATE PROCEDURE Add_Hose_Total_State
	@Hose_Total_State_ID		int,
	@Name				NCHAR(50)
AS
BEGIN
  IF NOT EXISTS( SELECT Table_Name FROM INFORMATION_SCHEMA.TABLES WHERE Table_Name='Hose_Total_State' )
  BEGIN
		print 'Hose_Total_State Table does not exist'
		RETURN
  END

  SET @Name = LEFT(@Name,50)

  PRINT 'Tank Type: ' + RTRIM(cast( @Hose_Total_State_ID as char )) + ' ' + @Name

  IF ( SELECT count(Hose_Total_State_ID) FROM Hose_Total_State WHERE Hose_Total_State_ID = @Hose_Total_State_ID  ) < 1
  BEGIN
	print 'Adding new record for Hose_Total_State' + RTRIM(cast( @Hose_Total_State_ID as char ))
        INSERT INTO Hose_Total_State
			( Hose_Total_State_ID, Hose_Total_State_Name )
        VALUES
			( @Hose_Total_State_ID, '' )
  END

  UPDATE Hose_Total_State
     SET Hose_Total_State_Name	= @Name
   WHERE Hose_Total_State_ID = @Hose_Total_State_ID
END
GO

-- Adding Tank_Dip_Types
IF EXISTS (SELECT name FROM sysobjects WHERE name = 'Add_Tank_Dip_Type' AND type = 'P')
   DROP PROCEDURE Add_Tank_Dip_Type
GO

CREATE PROCEDURE Add_Tank_Dip_Type
	@Tank_Dip_Type_ID		int,
	@Name				NCHAR(50)
AS
BEGIN
  IF NOT EXISTS( SELECT Table_Name FROM INFORMATION_SCHEMA.TABLES WHERE Table_Name='Tank_Dip_Type' )
  BEGIN
		print 'Tank_Dip_Type Table does not exist'
		RETURN
  END

  SET @Name = LEFT(@Name,50)

  PRINT 'Tank Type: ' + RTRIM(cast( @Tank_Dip_Type_ID as char )) + ' ' + @Name

  IF ( SELECT count(Tank_Dip_Type_ID) FROM Tank_Dip_Type WHERE Tank_Dip_Type_ID = @Tank_Dip_Type_ID  ) < 1
  BEGIN
	print 'Adding new record for Tank_Dip_Type' + RTRIM(cast( @Tank_Dip_Type_ID as char ))
        INSERT INTO Tank_Dip_Type
			( Tank_Dip_Type_ID, Tank_Dip_Type_Name )
        VALUES
			( @Tank_Dip_Type_ID, '' )
  END

  UPDATE Tank_Dip_Type
     SET Tank_Dip_Type_Name			= @Name
   WHERE Tank_Dip_Type_ID = @Tank_Dip_Type_ID
END
GO

-- Adding Tank_Movement_Types 
IF EXISTS (SELECT name FROM sysobjects WHERE name = 'Add_Tank_Movement_Type' AND type = 'P')
   DROP PROCEDURE Add_Tank_Movement_Type
GO

CREATE PROCEDURE Add_Tank_Movement_Type
	@Tank_Movement_Type_ID		int,
	@Name				NCHAR(50)
AS
BEGIN
  IF NOT EXISTS( SELECT Table_Name FROM INFORMATION_SCHEMA.TABLES WHERE Table_Name='Tank_Movement_Type' )
  BEGIN
		print 'Tank_Movement_Type Table does not exist'
		RETURN
  END

  SET @Name = LEFT(@Name,50)

  PRINT 'Tank Type: ' + RTRIM(cast( @Tank_Movement_Type_ID as char )) + ' ' + @Name

  IF ( SELECT count(Tank_Movement_Type_ID) FROM Tank_Movement_Type WHERE Tank_Movement_Type_ID = @Tank_Movement_Type_ID  ) < 1
  BEGIN
	-- add new record
	print 'Adding new record for Tank_Movement_Type' + RTRIM(cast( @Tank_Movement_Type_ID as char ))
        INSERT INTO Tank_Movement_Type
			( Tank_Movement_Type_ID, Tank_Movement_Type_Name )
        VALUES
			( @Tank_Movement_Type_ID, '' )
  END

  UPDATE Tank_Movement_Type
     SET Tank_Movement_Type_Name		= @Name
   WHERE Tank_Movement_Type_ID = @Tank_Movement_Type_ID
END
GO

-- Adding Tank_Delivery_State
IF EXISTS (SELECT name FROM sysobjects WHERE name = 'Add_Tank_Delivery_State' AND type = 'P')
   DROP PROCEDURE Add_Tank_Delivery_State
GO

CREATE PROCEDURE Add_Tank_Delivery_State
	@Tank_Delivery_State_ID		int,
	@Name				NCHAR(50)
AS
BEGIN
  IF NOT EXISTS( SELECT Table_Name FROM INFORMATION_SCHEMA.TABLES WHERE Table_Name='Tank_Delivery_State' )
  BEGIN
		print 'Tank_Delivery_State Table does not exist'
		RETURN
  END

  SET @Name = LEFT(@Name,50)

  PRINT 'Tank Type: ' + RTRIM(cast( @Tank_Delivery_State_ID as char )) + ' ' + @Name

  IF ( SELECT count(Tank_Delivery_State_ID) FROM Tank_Delivery_State WHERE Tank_Delivery_State_ID = @Tank_Delivery_State_ID  ) < 1
  BEGIN
	-- add new record
	print 'Adding new record for Tank_Delivery_State' + RTRIM(cast( @Tank_Delivery_State_ID as char ))
        INSERT INTO Tank_Delivery_State
			( Tank_Delivery_State_ID, Tank_Delivery_State_Name )
        VALUES
			( @Tank_Delivery_State_ID, '' )
  END

  UPDATE Tank_Delivery_State
     SET Tank_Delivery_State_Name			= @Name
   WHERE Tank_Delivery_State_ID = @Tank_Delivery_State_ID
END
GO


-- Adding Tank_Variance_Reason
IF EXISTS (SELECT name FROM sysobjects WHERE name = 'Add_Tank_Variance_Reason' AND type = 'P')
   DROP PROCEDURE Add_Tank_Variance_Reason
GO

CREATE PROCEDURE Add_Tank_Variance_Reason
	@Tank_Variance_Reason_ID		int,
	@Desc				NCHAR(80)
AS
BEGIN
  IF NOT EXISTS( SELECT Table_Name FROM INFORMATION_SCHEMA.TABLES WHERE Table_Name='Tank_Variance_Reason' )
  BEGIN
		print 'Tank_Variance_Reason Table does not exist'
		RETURN
  END

  SET @Desc = LEFT(@Desc,80)

  PRINT 'Tank Variance Reason Description: ' + RTRIM(cast( @Tank_Variance_Reason_ID as char )) + ' ' + @Desc

  IF ( SELECT count(Reason_ID) FROM Tank_Variance_Reason WHERE Reason_ID = @Tank_Variance_Reason_ID  ) < 1
  BEGIN
	-- add new record
	print 'Adding new record for Tank_Variance_Reason' + RTRIM(cast( @Tank_Variance_Reason_ID as char ))
        INSERT INTO Tank_Variance_Reason
			( Reason_ID, Reason_Description )
        VALUES
			( @Tank_Variance_Reason_ID, '' )
  END

  UPDATE Tank_Variance_Reason
     SET Reason_Description 	= @Desc
   WHERE Reason_ID = @Tank_Variance_Reason_ID
END
GO

IF EXISTS (SELECT name FROM sysobjects WHERE name = 'Add_Tank_Reading_Type' AND type = 'P')
 DROP PROCEDURE Add_Tank_Reading_Type
GO

CREATE PROCEDURE Add_Tank_Reading_Type
	   @Tank_Reading_Type_ID   int,
	   @Name				   NCHAR(50)
AS
BEGIN
 IF NOT EXISTS( SELECT Table_Name FROM INFORMATION_SCHEMA.TABLES WHERE Table_Name='Tank_Reading_Type' )
 BEGIN
  PRINT 'Tank_Reading_Type Table does not exist'
  RETURN
 END

 SET @Name = LEFT(@Name,50)

 PRINT 'Tank Reading Type: ' + RTRIM(cast( @Tank_Reading_Type_ID as char )) + ' ' + @Name

 IF ( SELECT count(Tank_Reading_Type_ID) FROM Tank_Reading_Type WHERE Tank_Reading_Type_ID = @Tank_Reading_Type_ID  ) < 1
 BEGIN
  PRINT 'Adding new record for Tank_Reading_Type' + RTRIM(cast( @Tank_Reading_Type_ID as char ))
  INSERT INTO Tank_Reading_Type
   ( Tank_Reading_Type_ID, Tank_Reading_Type_Name )
  VALUES
   ( @Tank_Reading_Type_ID, '' )
 END

 UPDATE Tank_Reading_Type
  SET Tank_Reading_Type_Name = @Name
 WHERE Tank_Reading_Type_ID  = @Tank_Reading_Type_ID
END
GO

IF EXISTS (SELECT name FROM sysobjects WHERE name = 'Add_Volume_Unit' AND type = 'P')
 DROP PROCEDURE Add_Volume_Unit
GO

CREATE PROCEDURE Add_Volume_Unit
	   @Volume_Unit_ID   	int,
	   @Name		NCHAR(20),
	   @ShortName		NCHAR(5)

AS
BEGIN
 IF NOT EXISTS( SELECT Table_Name FROM INFORMATION_SCHEMA.TABLES WHERE Table_Name='Volume_Unit' )
 BEGIN
  PRINT 'Volume_Unit Table does not exist'
  RETURN
 END

 SET @Name = LEFT(@Name,20)
 SET @ShortName = LEFT(@ShortName,5)

 PRINT 'Volume Unit: ' + RTRIM(cast( @Volume_Unit_ID as char )) + ' ' + @Name

 IF ( SELECT count(Volume_Unit_ID) FROM Volume_Unit WHERE Volume_Unit_ID = @Volume_Unit_ID  ) < 1
 BEGIN
  PRINT 'Adding new record for Volume_Unit' + RTRIM(cast( @Volume_Unit_ID as char ))
  INSERT INTO Volume_Unit
   ( Volume_Unit_ID, Volume_Unit_Name, Volume_Short_Name )
  VALUES
   ( @Volume_Unit_ID, @Name, @ShortName )
 END

 UPDATE Volume_Unit
  SET Volume_Unit_Name = @Name,
      Volume_Short_Name = @ShortName
 WHERE Volume_Unit_ID  = @Volume_Unit_ID
END
GO

-- I don't think anybody else will be using these ...
--GRANT EXECUTE ON Add_Tank_Movement_Type TO ENABLER 
--GRANT EXECUTE ON Add_Tank_Dip_Type TO ENABLER 
--GRANT EXECUTE ON Add_Hose_Total_State TO ENABLER 
--GRANT EXECUTE ON Add_Tank_Variance_Reason TO ENABLER 
--GRANT EXECUTE ON Add_Tank_Reading_Type TO ENABLER 

PRINT '-- Adding Hose Total States'
EXEC Add_Hose_Total_State
	@Hose_Total_State_ID	=1,
	@Name			='Normal'
EXEC Add_Hose_Total_State
	@Hose_Total_State_ID	=2,
	@Name			='Etotals Not Supported'
EXEC Add_Hose_Total_State
	@Hose_Total_State_ID	=3,
	@Name			='Etotals Error'
EXEC Add_Hose_Total_State
	@Hose_Total_State_ID	=4,
	@Name			='Unknown'
GO

PRINT '-- Adding Tank Dip Types'
EXEC Add_Tank_Dip_Type
	@Tank_Dip_Type_ID	=1,
	@Name				='None'
EXEC Add_Tank_Dip_Type
	@Tank_Dip_Type_ID	=2,
	@Name				='Dip Stick'
EXEC Add_Tank_Dip_Type
	@Tank_Dip_Type_ID	=3,
	@Name				='Manual ATG Sensor'
EXEC Add_Tank_Dip_Type
	@Tank_Dip_Type_ID	=4,
	@Name				='Book/Calc'
-- required for Opening Tank Dips
EXEC Add_Tank_Dip_Type
	@Tank_Dip_Type_ID	=5,
	@Name				='ATG Reading'
GO


PRINT '-- Adding Tank Movement types'
EXEC Add_Tank_Movement_Type
	@Tank_Movement_Type_ID	=1,
	@Name				='Delivery - Ticket'
EXEC Add_Tank_Movement_Type
	@Tank_Movement_Type_ID	=2,
	@Name				='TestTransfer'
EXEC Add_Tank_Movement_Type
	@Tank_Movement_Type_ID	=3,
	@Name				='TankToTank'
EXEC Add_Tank_Movement_Type
	@Tank_Movement_Type_ID	=4,
	@Name				='ProductUplift'
EXEC Add_Tank_Movement_Type
	@Tank_Movement_Type_ID	=5,
	@Name				='WaterUplift'
EXEC Add_Tank_Movement_Type
	@Tank_Movement_Type_ID	=6,
	@Name				='Empty'
EXEC Add_Tank_Movement_Type
	@Tank_Movement_Type_ID	=7,
	@Name				='Delivery - TruckMeter'
GO


PRINT 'Adding Tank Delivery States'
EXEC Add_Tank_Delivery_State
	@Tank_Delivery_State_ID	=1,    
	@Name			='None'
EXEC Add_Tank_Delivery_State
	@Tank_Delivery_State_ID	=2,
	@Name			='Delivering'
EXEC Add_Tank_Delivery_State
	@Tank_Delivery_State_ID	=3,
	@Name			='Unknown Delivering'
GO


PRINT '-- Adding Tank Variance Reasons'
EXEC Add_Tank_Variance_Reason
	@Tank_Variance_Reason_ID	=1,
	@Desc			='Probe missing'
EXEC Add_Tank_Variance_Reason
	@Tank_Variance_Reason_ID	=2,
	@Desc			='Probe stuck'
EXEC Add_Tank_Variance_Reason
	@Tank_Variance_Reason_ID	=3,
	@Desc			='Tank moving at cutover time'
EXEC Add_Tank_Variance_Reason
	@Tank_Variance_Reason_ID	=4,
	@Desc			='Missing delivery (negative variance)'
EXEC Add_Tank_Variance_Reason
	@Tank_Variance_Reason_ID	=5,
	@Desc			='Delivery entered in wrong period (positive variance)'
EXEC Add_Tank_Variance_Reason
	@Tank_Variance_Reason_ID	=6,
	@Desc			='Dispenser maintenance activity'
EXEC Add_Tank_Variance_Reason
	@Tank_Variance_Reason_ID	=7,
	@Desc			='WSM application not running'
EXEC Add_Tank_Variance_Reason
	@Tank_Variance_Reason_ID	=8,
	@Desc			='Sales transactions during delivery'
EXEC Add_Tank_Variance_Reason
	@Tank_Variance_Reason_ID	=9,
	@Desc			='Delivery ticket data not available'
EXEC Add_Tank_Variance_Reason
	@Tank_Variance_Reason_ID	=10,
	@Desc			='Tank maintenance movement missing'
EXEC Add_Tank_Variance_Reason
	@Tank_Variance_Reason_ID	=11,
	@Desc			='Tank maintenance activity entered in wrong period'
EXEC Add_Tank_Variance_Reason
	@Tank_Variance_Reason_ID	=12,
	@Desc			='Tank stock data not entered at same time as turnover'
EXEC Add_Tank_Variance_Reason
	@Tank_Variance_Reason_ID	=13,
	@Desc			='Turnover data not synchronised with manual dips'
EXEC Add_Tank_Variance_Reason
	@Tank_Variance_Reason_ID	=14,
	@Desc			='Stage 1 VR system not working / under maintenance'
EXEC Add_Tank_Variance_Reason
	@Tank_Variance_Reason_ID	=15,
	@Desc			='Stage 2 VR system not working / under maintenance'
EXEC Add_Tank_Variance_Reason
	@Tank_Variance_Reason_ID	=16,
	@Desc			='Not known. Further Investigation required'
GO

PRINT '-- Adding Tank Dip Reading Types'
EXEC Add_Tank_Reading_Type
	@Tank_Reading_Type_ID = 1,
	@Name			='Volume'
EXEC Add_Tank_Reading_Type
	@Tank_Reading_Type_ID = 2,
	@Name			='Water Volume'
EXEC Add_Tank_Reading_Type
	@Tank_Reading_Type_ID = 3,
	@Name			='Temperature'
EXEC Add_Tank_Reading_Type
	@Tank_Reading_Type_ID = 4,
	@Name			='Density'
GO

PRINT '-- Adding Grades Volume Units of Measure'
EXEC Add_Volume_Unit
	@Volume_Unit_ID 	= 1,
	@Name			='Liters',
	@ShortName		='L'
EXEC Add_Volume_Unit
	@Volume_Unit_ID 	= 2,
	@Name			='Gallons',
	@ShortName		='G'	
EXEC Add_Volume_Unit
	@Volume_Unit_ID 	= 3,
	@Name			='Kilogram',
	@ShortName		='kg'		
EXEC Add_Volume_Unit
	@Volume_Unit_ID 	= 4,
	@Name			='cubic meter',
	@ShortName		='m3'	
GO


-- Normalize NULL Grade Volume Units of Measure
UPDATE Grades SET Volume_Unit_ID=1 where ISNULL(Volume_Unit_ID,0)=0
GO

-- Normalize the Tank Gauge ID and Tank Types 
IF EXISTS (SELECT null from SYSOBJECTS where NAME = 'SP_Update_Tank_Gauge_ID_Of_Tanks' AND XTYPE = 'P')
BEGIN
	print 'Setting up Tank Gauges...'
	EXEC SP_Update_Tank_Gauge_ID_Of_Tanks 
	DROP PROCEDURE SP_Update_Tank_Gauge_ID_Of_Tanks
END
GO


IF EXISTS (SELECT null from SYSOBJECTS where NAME = 'SP_Update_Tank_Type_ID_Of_Tanks' AND XTYPE = 'P')
BEGIN
	print 'Normalizing Tank Types...'
	EXEC SP_Update_Tank_Type_ID_Of_Tanks
	DROP PROCEDURE SP_Update_Tank_Type_ID_Of_Tanks
END
GO

-- Normalize Tank History table for new reports
IF EXISTS (SELECT null from SYSOBJECTS where NAME = 'SP_Update_Tank_History' AND XTYPE = 'P')
BEGIN
	print 'Normalizing Tank History table...'
	EXEC SP_Update_Tank_History
	DROP PROCEDURE SP_Update_Tank_History
END
GO

-- Do this at the end so that it won't fail during an upgrade scenario.
-- closing periods will ensure that history records for tanks, grades, hoses etc will be created
print ''
print 'Make sure all period types have been initialised'
go

IF NOT EXISTS( SELECT * FROM periods WHERE period_type = 1 )
BEGIN
	print 'Initialising period type 1'
	exec sp_close_period 1 
END

IF NOT EXISTS( SELECT * FROM periods WHERE period_type = 2 )
BEGIN
	print 'Initialising period type 2'
	exec sp_close_period 2 
END

IF NOT EXISTS( SELECT * FROM periods WHERE period_type = 3 )
BEGIN
	print 'Initialising period type 3'
	exec sp_close_period 3 
END

IF NOT EXISTS( SELECT * FROM periods WHERE period_type = 4 )
BEGIN
	print 'Initialising period type 4'
	exec sp_close_period 4
END
go


print CONVERT(varchar,getdate(), 121)
print 'Finished populating Enabler system tables'
go
